#!/usr/bin/env node

const { marked } = require('marked')
const child_process = require('child_process')
const fs = require('fs/promises')
const path = require('path')
const path = require('path')

async function main() {
  const { stdout } = await runCommand([
    'find', './docs', '-type', 'f', '-iname', '*.md'
  ])
  const filePaths = stdout.toString().split('\n')
  /** @type {Record<string, { filePath: string, title: string }[]>} */
  const authorCache = {}

  for (const filePath of filePaths) {
    if (!await doesFileExist(filePath)) {
      continue
    }

    const baseName = path.basename(filePath)
    if (baseName === 'index.md' || baseName === 'authors.md') {
      continue
    }

    /** @type {string | null} */
    let title = null
    /** @type {string | null} */
    let author = null

    try {
      const markdown = await fs.readFile(filePath, 'utf-8')
      const tokens = marked.lexer(markdown)

      for (const token of tokens) {
        if (!title && token.type === 'heading') {
          title = token.text
        } else if (!author && token.type === 'paragraph') {
          author = token.text
        }
      }

      if (title && author) {
        let specificAuthorCache = authorCache[author]

        if (!specificAuthorCache) {
          specificAuthorCache = []
          authorCache[author] = specificAuthorCache
        }

        specificAuthorCache.push({ filePath, title })
      }
    } catch(err) {
      console.error(`Error while reading ${filePath}`)
      console.error(err)
    }
  }

  const sortedAuthors = Object.keys(authorCache)
  sortedAuthors.sort((a, b) => a.localeCompare(b))
  let markdown = ''

  for (const author of sortedAuthors) {
    markdown += `\n\n## ${author.replace(/\n/g, ' ')}\n\n`
    const sortedRecipes = authorCache[author]
    sortedRecipes.sort((a, b) => a.title.localeCompare(b.title))

    for (const recipe of sortedRecipes) {
      const normalizedPath = './' + recipe.filePath.replace(/^.\/docs\//, '')
      markdown += `- [${recipe.title}](${normalizedPath})\n`
    }
  }

  console.log(markdown)
}

/**
 *
 * @param cmd {string[]}
 */
async function runCommand(cmd) {
  const [_cmd, ...args] = cmd
  const process = child_process.spawnSync(_cmd, args, {encoding: 'utf-8'})

  return process
}

/**
 *
 * @param filePath {string}
 */
async function doesFileExist(filePath) {
  return fs.access(filePath)
    .then(() => true)
    .catch(() => false)
}

main()
